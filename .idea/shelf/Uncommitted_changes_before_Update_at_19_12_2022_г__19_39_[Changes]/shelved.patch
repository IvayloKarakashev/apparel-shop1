Index: firstProject/accounts/views/user_address.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firstProject/accounts/views/user_address.py b/firstProject/accounts/views/user_address.py
new file mode 100644
--- /dev/null	(date 1671395742922)
+++ b/firstProject/accounts/views/user_address.py	(date 1671395742922)
@@ -0,0 +1,121 @@
+import json
+
+from django.shortcuts import render, redirect
+from django.urls import reverse_lazy
+from django.views import generic as generic_views
+from firstProject.accounts.models import Profile
+from firstProject.web.forms import ShippingAddressForm
+from firstProject.web.models import Order, ShippingAddress
+
+
+def select_address(request):
+    page_title = 'Select Address'
+    if request.user.is_authenticated:
+        customer = request.user
+        profile = Profile.objects.get(user_id=customer.id)
+        order, created = Order.objects.get_or_create(customer=customer, complete=False)
+        items = order.orderitem_set.all()
+        shipping_addresses = ShippingAddress.objects.filter(profile_id=profile.pk)
+
+    context = {
+        'items': items,
+        'order': order,
+        'profile': profile,
+        'addresses': shipping_addresses,
+        'page_title': page_title
+    }
+
+    if request.method == 'GET':
+        if shipping_addresses:
+            return render(request, 'front-end/select-address.html', context)
+        return redirect(reverse_lazy('enter new address'))
+
+    if request.method == 'POST':
+        data = json.loads(request.body)
+        selected_address_id = data['addressId']
+        order.shipping_address = ShippingAddress.objects.get(id=selected_address_id)
+        order.save()
+
+        return redirect(reverse_lazy('checkout'))
+
+
+def enter_new_address(request):
+    page_title = 'Enter address'
+    form = ShippingAddressForm()
+
+    if request.user.is_authenticated:
+        customer = request.user
+        profile = Profile.objects.get(user_id=customer.id)
+        order, created = Order.objects.get_or_create(customer=customer, complete=False)
+        items = order.orderitem_set.all()
+
+        if request.method == 'GET':
+            form = ShippingAddressForm()
+
+        if request.method == 'POST':
+
+            form = ShippingAddressForm(request.POST)
+
+            if form.is_valid():
+                address = form.save(commit=False)
+                address.profile = profile
+                address.save()
+
+                order.shipping_address = address
+                order.save()
+
+            return redirect(reverse_lazy('checkout'))
+
+    context = {
+        'customer': customer,
+        'profile': profile,
+        'order': order,
+        'items': items,
+        'form': form,
+        'page_title': page_title
+    }
+
+    return render(request, 'front-end/enter-new-address.html', context)
+
+
+class ShippingAddressView(generic_views.CreateView):
+    form_class = ShippingAddressForm
+    template_name = 'front-end/checkout.html'
+
+
+class UserAddressesView(generic_views.ListView):
+    model = ShippingAddress
+    template_name = 'front-end/user-addresses.html'
+
+    def get_queryset(self):
+        return ShippingAddress.objects.filter(profile=self.kwargs['pk'])
+
+
+class AddUserAddressView(generic_views.CreateView):
+    form_class = ShippingAddressForm
+    template_name = 'front-end/user-shipping-address-add.html'
+
+    def form_valid(self, form):
+        if form.is_valid():
+            obj = form.save(commit=False)
+            obj.profile = Profile.objects.get(user_id=self.request.user)
+            obj.save()
+
+            return redirect(reverse_lazy('user shipping addresses', kwargs={'pk': obj.profile.pk}))
+
+
+class EditUserShippingAddressView(generic_views.UpdateView):
+    model = ShippingAddress
+    form_class = ShippingAddressForm
+    template_name = 'front-end/user-shipping-address-edit.html'
+
+    def get_success_url(self):
+        return reverse_lazy('user shipping addresses', kwargs={'pk': self.object.profile_id})
+
+
+class DeleteUserShippingAddressView(generic_views.DeleteView):
+    model = ShippingAddress
+    template_name = 'front-end/user-shipping-address-confirm-delete.html'
+
+    def get_success_url(self):
+        return reverse_lazy('user shipping addresses', kwargs={'pk': self.object.profile_id})
Index: firstProject/accounts/views/user.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firstProject/accounts/views/user.py b/firstProject/accounts/views/user.py
new file mode 100644
--- /dev/null	(date 1671395742891)
+++ b/firstProject/accounts/views/user.py	(date 1671395742891)
@@ -0,0 +1,40 @@
+from django.contrib.auth import views as auth_views, get_user_model, login
+
+from django.urls import reverse_lazy
+from django.views import generic as generic_views
+
+from firstProject.accounts.forms import UserRegistrationForm
+from firstProject.utilities.mixins import PageTitleMixin
+
+user_model = get_user_model()
+
+
+class UserRegistrationView(PageTitleMixin, generic_views.CreateView):
+    page_title = 'Register'
+    form_class = UserRegistrationForm
+    template_name = 'front-end/user-register.html'
+    success_url = reverse_lazy('index')
+
+    def form_valid(self, *args, **kwargs):
+        result = super().form_valid(*args, **kwargs)
+        login(self.request, self.object)
+        return result
+
+
+class UserLoginView(PageTitleMixin, auth_views.LoginView):
+    page_title = 'Login'
+    template_name = 'front-end/user-login.html'
+    success_url = reverse_lazy('index')
+
+    def get_success_url(self):
+        if self.success_url:
+            return self.success_url
+        return super().get_success_url()
+
+
+class UserLogoutView(auth_views.LogoutView):
+    next_page = reverse_lazy('index')
+
+
+class UserPasswordChangeView(auth_views.PasswordChangeView):
+    pass
Index: firstProject/accounts/views/profile.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firstProject/accounts/views/profile.py b/firstProject/accounts/views/profile.py
new file mode 100644
--- /dev/null	(date 1671399916606)
+++ b/firstProject/accounts/views/profile.py	(date 1671399916606)
@@ -0,0 +1,60 @@
+from django.contrib.auth.decorators import login_required
+from django.contrib.auth.mixins import LoginRequiredMixin
+from django.shortcuts import render
+from django.urls import reverse_lazy
+from django.views import generic as generic_views
+
+from firstProject.accounts.models import Profile
+from firstProject.utilities.mixins import PageTitleMixin
+from firstProject.web.models import Order, WishList
+
+
+def user_profile(request):
+    profile = Profile.objects.get(user_id=request.user.id)
+
+    context = {
+        'profile': profile
+    }
+
+    return render(request, 'accounts/profile.html', context)
+
+
+class EditUserProfileView(LoginRequiredMixin, PageTitleMixin, generic_views.UpdateView):
+    page_title = 'Edit Profile'
+    model = Profile
+    template_name = 'front-end/user-profile-edit.html'
+    fields = ('first_name', 'last_name', 'gender')
+
+    def get_queryset(self):
+        qs = super().get_queryset()
+        return qs.filter(user_id=self.request.user)
+
+    def get_success_url(self):
+        return reverse_lazy('user dashboard', kwargs={'pk': self.object.pk})
+
+    # def form_valid(self, form):
+    #     if form.is_valid():
+    #         obj = form.save(commit=False)
+    #         # obj.user = request.user
+    #         # obj.order = order
+    #
+    #         obj.save()
+
+    # def get_object(self, queryset=None):
+    #     return self.model.objects.get(pk=self.request.user.pk)
+
+
+class UserDashboardView(LoginRequiredMixin, PageTitleMixin, generic_views.DetailView):
+    page_title = 'Dashboard'
+    model = Profile
+    template_name = 'front-end/user-dashboard.html'
+
+    def get_queryset(self):
+        qs = super().get_queryset()
+        return qs.filter(user_id=self.request.user)
+
+    def get_context_data(self, **kwargs):
+        context = super().get_context_data(**kwargs)
+        context['orders'] = Order.objects.filter(customer_id=self.object.user_id)
+        context['wishlist'] = WishList.objects.filter(user_id=self.object.user_id)
+        return context
Index: firstProject/web/views/generic.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firstProject/web/views/generic.py b/firstProject/web/views/generic.py
new file mode 100644
--- /dev/null	(date 1671394913473)
+++ b/firstProject/web/views/generic.py	(date 1671394913473)
@@ -0,0 +1,14 @@
+from django.shortcuts import render
+from firstProject.accounts.models import Profile
+
+
+def home_view(request, profile=None):
+    page_title = 'Apparel Shop'
+    if request.user.is_authenticated and not request.user.is_superuser:
+        profile = Profile.objects.get(user_id=request.user.id)
+
+    context = {
+        'pofile': profile,
+        'page_title': page_title
+    }
+    return render(request, 'front-end/index.html', context)
Index: firstProject/web/views/products.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firstProject/web/views/products.py b/firstProject/web/views/products.py
new file mode 100644
--- /dev/null	(date 1671397125094)
+++ b/firstProject/web/views/products.py	(date 1671397125094)
@@ -0,0 +1,24 @@
+from django.views import generic as generic_views
+from firstProject.web.models import Product, Category
+
+
+class CategoriesView(generic_views.ListView):
+    model = Category
+    template_name = 'front-end/categories.html'
+
+
+class ProductDetailsView(generic_views.DetailView):
+    model = Product
+    template_name = 'front-end/product-details.html'
+
+
+class ProductsView(generic_views.ListView):
+    model = Product
+    template_name = 'front-end/products.html'
+
+    def get_queryset(self):
+        # print(dir(self))
+        # print(self.args)
+        # print(self.kwargs)
+        # print(self.request)
+        return Product.objects.filter(category=self.kwargs['pk'])
Index: firstProject/web/views/wishlist.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firstProject/web/views/wishlist.py b/firstProject/web/views/wishlist.py
new file mode 100644
--- /dev/null	(date 1671397125094)
+++ b/firstProject/web/views/wishlist.py	(date 1671397125094)
@@ -0,0 +1,28 @@
+import json
+
+from django.http import JsonResponse
+from django.views import generic as generic_views
+from firstProject.utilities.mixins import PageTitleMixin
+from firstProject.web.models import WishList, Product
+
+
+class WishListView(PageTitleMixin, generic_views.ListView):
+    page_title = 'Wishlist'
+    model = WishList
+    template_name = 'front-end/wishlist.html'
+
+    def get_queryset(self):
+        return WishList.objects.filter(user=self.request.user)
+
+
+def update_wishlist(request):
+    data = json.loads(request.body)
+    product_id = data['productId']
+    action = data['action']
+    user = request.user
+    product = Product.objects.get(id=product_id)
+    item, created = WishList.objects.get_or_create(user=user, product=product)
+    if action == 'remove':
+        item.delete()
+
+    return JsonResponse('Wishlist was updated.', safe=False)
Index: firstProject/web/views/order.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firstProject/web/views/order.py b/firstProject/web/views/order.py
new file mode 100644
--- /dev/null	(date 1671395742906)
+++ b/firstProject/web/views/order.py	(date 1671395742906)
@@ -0,0 +1,141 @@
+import json
+
+from django.contrib.auth.decorators import login_required
+from django.http import JsonResponse
+from django.shortcuts import render, redirect
+from django.urls import reverse_lazy
+from django.views import generic as generic_views
+
+from firstProject.accounts.models import Profile
+from firstProject.utilities.mixins import PageTitleMixin
+from firstProject.web.models import Order, Category, Product, ProductSize, OrderItem, ShippingAddress
+
+
+@login_required
+def cart(request):
+    page_title = 'Cart'
+
+    if request.user.is_authenticated:
+        customer = request.user
+        order, created = Order.objects.get_or_create(customer=customer, complete=False)
+        items = order.orderitem_set.all()
+        categories = Category.objects.all()
+    else:
+        items = []
+        order = {'get_cart_total': 0, 'get_cart_items': 0}
+
+    context = {
+        'items': items,
+        'order': order,
+        'categories': categories,
+        'page_title': page_title
+    }
+
+    return render(request, 'front-end/cart.html', context)
+
+
+def add_to_cart(request):
+    data = json.loads(request.body)
+    product_id = data['productId']
+    product_size = data['size']
+    quantity = data['quantity']
+
+    customer = request.user
+    product = Product.objects.get(id=product_id)
+    size = ProductSize.objects.get(product=product, name=product_size)
+    order, created = Order.objects.get_or_create(customer=customer, complete=False)
+
+    order_item, created = OrderItem.objects.get_or_create(order=order, product=product, size=size)
+    print(quantity)
+    order_item.quantity += int(quantity)
+    order_item.save()
+
+
+def update_item_quantity(request):
+    data = json.loads(request.body)
+    product_id = data['productId']
+    action = data['action']
+    product_size = data['size']
+
+    customer = request.user
+    product = Product.objects.get(id=product_id)
+    size = ProductSize.objects.get(product=product, name=product_size)
+    order, created = Order.objects.get_or_create(customer=customer, complete=False)
+
+    order_item, created = OrderItem.objects.get_or_create(order=order, product=product, size=size)
+
+    if action == 'add':
+        order_item.quantity += 1
+    elif action == 'subtract':
+        order_item.quantity -= 1
+
+    order_item.save()
+
+    if action == 'remove' or order_item.quantity <= 0:
+        order_item.delete()
+
+    return JsonResponse('Item was added.', safe=False)
+
+
+def clear_items(request):
+    customer = request.user
+    order_items = Order.objects.get(customer=customer, complete=False).orderitem_set.all()
+    order_items.delete()
+
+    return redirect(reverse_lazy('cart'))
+
+
+def checkout(request):
+    page_title = 'Checkout'
+
+    if request.user.is_authenticated:
+        customer = request.user
+        profile = Profile.objects.get(user_id=customer.id)
+        order, created = Order.objects.get_or_create(customer=customer, complete=False)
+        items = order.orderitem_set.all()
+        shipping_address = ShippingAddress.objects.get(id=order.shipping_address.id)
+
+        # return redirect(reverse_lazy('order success', kwargs={'pk': order}))
+
+    else:
+        items = []
+        order = {'get_cart_total': 0, 'get_cart_items': 0}
+
+    context = {
+        'items': items,
+        'order': order,
+        'profile': profile,
+        'address': shipping_address,
+        'page_title': page_title
+    }
+
+    return render(request, 'front-end/checkout.html', context)
+
+
+def finalize_order(request):
+    if request.user.is_authenticated:
+        customer = request.user
+        order, created = Order.objects.get_or_create(customer=customer, complete=False)
+
+        order.complete = True
+        order.save()
+
+        return redirect(reverse_lazy('order success', kwargs={'pk': order}))
+
+
+class OrderSuccessView(PageTitleMixin, generic_views.DetailView):
+    page_title = 'Order completed'
+    model = Order
+    template_name = 'front-end/order-success.html'
+
+    def get_queryset(self):
+        return Order.objects.filter(pk=self.kwargs['pk'])
+
+
+class OrderTrackingView(PageTitleMixin, generic_views.DetailView):
+    page_title = 'Track order'
+    model = Order
+    template_name = 'front-end/order-tracking.html'
+
+    def get_queryset(self):
+        return Order.objects.filter(pk=self.kwargs['pk'])
Index: firstProject/web/views/static.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firstProject/web/views/static.py b/firstProject/web/views/static.py
new file mode 100644
--- /dev/null	(date 1671395026386)
+++ b/firstProject/web/views/static.py	(date 1671395026386)
@@ -0,0 +1,20 @@
+from django.views import generic as generic_views
+
+from firstProject.utilities.mixins import PageTitleMixin
+from firstProject.web.models import FAQ
+
+
+class FAQView(PageTitleMixin, generic_views.ListView):
+    page_title = 'FAQ'
+    model = FAQ
+    template_name = 'front-end/faq.html'
+
+
+class TermsAndConditionsView(PageTitleMixin, generic_views.TemplateView):
+    page_title = 'Terms and Conditions'
+    template_name = 'front-end/terms.html'
+
+
+class AboutView(PageTitleMixin, generic_views.TemplateView):
+    template_name = 'front-end/about-us.html'
+    page_title = 'About us'
diff --git a/firstProject/accounts/views/__init__.py b/firstProject/accounts/views/__init__.py
new file mode 100644
diff --git a/firstProject/web/views/__init__.py b/firstProject/web/views/__init__.py
new file mode 100644
